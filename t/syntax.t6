#!/usr/bin/env perl6
use Test;
plan 140;
is qq:x{perl6 -ce 'say "Hello, World!"'}, "Syntax OK\n";
is q:x{perl6 -ce '$_ ~= "\n"' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '$_ ~= "\n" x 4' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say ""' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.say if /\S/' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.say if .chars' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '$*ARGFILES.slurp.subst(/\n+/, "\n\n", :g).say' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say "{++$} $_"' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say $*ARGFILES.ins ~ " $_"' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '$_ = "{++$} $_" if /\S/' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '$_ = $*ARGFILES.ins ~ " $_" if /\S/' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say lines.elems' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say lines.Int' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'lines.Int.say' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'lines.grep(/\S/).elems.say' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'lines.grep(/^\s*$/).elems.say' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say "7 is prime" if 7.Int.is-prime'}, "Syntax OK\n";
is q:x{perl6 -ce 'say [+] .split("\t")'}, "Syntax OK\n";
is q:x{perl6 -ce 'say [+] lines.split("\t")'}, "Syntax OK\n";
is q:x{perl6 -ce '.split("\t").pick(*).join("\t").say'}, "Syntax OK\n";
is q:x{perl6 -ce '.split("\t").min.say'}, "Syntax OK\n";
is q:x{perl6 -ce 'lines.split("\t").min.say'}, "Syntax OK\n";
is q:x{perl6 -ce '.split("\t").max.say'}, "Syntax OK\n";
is q:x{perl6 -ce 'lines.split("\t").max.say'}, "Syntax OK\n";
is q:x{perl6 -ce '.split("\t").map(*.abs).join("\t").say'}, "Syntax OK\n";
is q:x{perl6 -ce '.chars.say' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.words.elems.say' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.split(",").elems.say' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say lines.split("\t").elems'}, "Syntax OK\n";
is q:x{perl6 -ce 'say lines.words.elems' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say lines.split("\t").comb(/pattern/).elems'}, "Syntax OK\n";
is q:x{perl6 -ce 'say lines.words.comb(/pattern/).elems'}, "Syntax OK\n";
is q:x{perl6 -ce 'say lines.grep(/in/).elems'}, "Syntax OK\n";
is q:x{perl6 -ce 'say pi.fmt("%.10f")'}, "Syntax OK\n";
is q:x{perl6 -ce 'say π'}, "Syntax OK\n";
is q:x{perl6 -ce 'say e.fmt("%.10f")'}, "Syntax OK\n";
is q:x{perl6 -ce 'say e'}, "Syntax OK\n";
is q:x{perl6 -ce 'say time'}, "Syntax OK\n";
is q:x{perl6 -MDateTime::TimeZone -ce 'say to-timezone("GMT",DateTime.now)'}, "Syntax OK\n";
is q:x{perl6 -ce 'say DateTime.now'}, "Syntax OK\n";
is q:x{perl6 -ce 'say DateTime.now.map({$_.hour, $_.minute, $_.second.round}).join(":")'}, "Syntax OK\n";
is q:x{perl6 -ce 'say DateTime.now.earlier(:1day)'}, "Syntax OK\n";
is q:x{perl6 -ce 'say DateTime.now.earlier(:14months).earlier(:9days).earlier(:7seconds)'}, "Syntax OK\n";
is q:x{perl6 -ce 'say [*] 1..5'}, "Syntax OK\n";
is q:x{perl6 -ce 'say [gcd] @list_of_numbers'}, "Syntax OK\n";
is q:x{perl6 -ce 'say (20, 35, *%* ... 0)[*-2]'}, "Syntax OK\n";
is q:x{perl6 -ce 'say 20 lcm 35'}, "Syntax OK\n";
is q:x{perl6 -ce 'say 20 * 35 / (20 gcd 35)'}, "Syntax OK\n";
is q:x{perl6 -ce '.say for (5..^15).roll(10)'}, "Syntax OK\n";
is q:x{perl6 -ce 'say .join for [1..5].permutations'}, "Syntax OK\n";
is q:x{perl6 -ce '.say for <1 2 3>.combinations'}, "Syntax OK\n";
is q:x{perl6 -ce 'say :256["127.0.0.1".comb(/\d+/)]'}, "Syntax OK\n";
is q:x{perl6 -ce 'say +":256[{q/127.0.0.1/.subst(:g,/\./,q/,/)}]"'}, "Syntax OK\n";
is q:x{perl6 -ce 'say Buf.new(+«"127.0.0.1".split(".")).unpack("N")'}, "Syntax OK\n";
is q:x{perl6 -ce 'say join ".", @(pack "N", 2130706433)'}, "Syntax OK\n";
is q:x{perl6 -ce 'say join ".", map { ((2130706433+>(8*$_))+&0xFF) }, (3...0)'}, "Syntax OK\n";
is q:x{perl6 -ce '.say for "a".."z"'}, "Syntax OK\n";
is q:x{perl6 -ce '.say for "a".."zz"'}, "Syntax OK\n";
is q:x{perl6 -ce 'say 255.base(16)'}, "Syntax OK\n";
is q:x{perl6 -ce 'say sprintf("%x", 255)'}, "Syntax OK\n";
is q:x{perl6 -ce 'say sprintf("%3i => %2x", $_, $_) for 0..255'}, "Syntax OK\n";
is q:x{perl6 -ce 'say sprintf("%%%x", 255)'}, "Syntax OK\n";
is q:x{perl6 -ce 'print roll 10, "a".."z"'}, "Syntax OK\n";
is q:x{perl6 -ce 'print roll "a".."z": 10'}, "Syntax OK\n";
is q:x{perl6 -ce 'print roll 15, "0".."z"'}, "Syntax OK\n";
is q:x{perl6 -ce 'print roll "0".."z": 15'}, "Syntax OK\n";
is q:x{perl6 -ce 'print "a" x 50'}, "Syntax OK\n";
is q:x{perl6 -ce '(1..100).grep(* %% 2).say'}, "Syntax OK\n";
is q:x{perl6 -ce '"storm in a teacup".chars.say'}, "Syntax OK\n";
is q:x{perl6 -ce 'my @letters = "a".."z"; @letters.Int.say'}, "Syntax OK\n";
is q:x{perl6 -ce 'tr/A..Za..z/N..ZA..Mn..za..m/' example.txt}, "Syntax OK\n";
is q:x{perl6 -MMIME::Base64 -ce 'print MIME::Base64.encode-str($_)' example.txt}, "Syntax OK\n";
is q:x{perl6 -MMIME::Base64 -ce 'print MIME::Base64.decode-str($_)' base64.txt}, "Syntax OK\n";
is q:x{perl6 -MURI::Encode -ce 'say uri_encode("http://www.google.com")'}, "Syntax OK\n";
is q:x{perl6 -MURI::Encode -ce 'say uri_decode("http://www.google.com")'}, "Syntax OK\n";
is q:x{perl6 -MHTML::Entity -ce 'print encode-entities($string)'}, "Syntax OK\n";
is q:x{perl6 -MHTML::Entity -ce 'print decode-entities($string)'}, "Syntax OK\n";
is q:x{perl6 -ce '.=uc' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say .uc' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.=lc' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say .lc' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say s/(\w+){}/{$0.uc}/' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'tr/a..zA..Z/A..Za..z/' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say tr/a..zA..Z/A..Za..z/.after' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say .wordcase' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say .trim-leading' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say .trim-trailing' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say .trim' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'print .subst(/\n/, "\r\n")' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'print .subst(/\r\n/, "\n")' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 's:g/ut/foo/' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 's:g/ut/foo/ if /Lorem/' example.txt}, "Syntax OK\n";
is q:x{perl6 -M JSON::Tiny -ce 'say to-json(lines)' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say .words.pick(5)' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'my $n=2; say "banana".comb.rotor($n,$n-1).map({[~] @$_})'}, "Syntax OK\n";
is q:x{perl6 -ce 'my $n=2; say "banana".comb.rotor($n,$n-1).map({[~] @$_}).Set.sort'}, "Syntax OK\n";
is q:x{perl6 -ce 'my $n=2; say "banana".comb.rotor($n,$n-1).map({[~] @$_}).Bag.sort.join("\n")'}, "Syntax OK\n";
is q:x{perl6 -ce 'say lines[0].words.map({[~] @$_}).Bag.sort.join("\n")' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'my $a="banana";my $b="anna";say ($a.comb (&) $b.comb)/($a.comb.Set + $b.comb.Set)'}, "Syntax OK\n";
is q:x{perl6 -ce 'my $a="banana";my $b="anna";say ($a.comb (&) $b.comb) / ($a.comb (|) $b.comb)'}, "Syntax OK\n";
is q:x{perl6 -ce 'my $a="banana";my $b="anna";say ($a.comb (&) $b.comb) / ($a.comb.Set.elems, $b.comb.Set.elems).min'}, "Syntax OK\n";
is q:x{perl6 -ce 'my $a="banana";my $b="anna";say ($a.comb (&) $b.comb)/($a.comb.Set.elems.sqrt*$b.comb.Set.elems.sqrt)'}, "Syntax OK\n";
is q:x{perl6 -ce 'say {}.push: %("banana".comb.pairs).invert'}, "Syntax OK\n";
is q:x{perl6 -ce '({}.push: %(lines[0].words.pairs).invert).sort.join("\n").say' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.say;exit' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'lines[0].say' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'lines.shift.say' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'exit if ++$ > 10' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.say if ++$ < 11' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'lines.pop.say' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.say for lines[^5]' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '/<[aeiou]>/ && .print' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.say if .comb (>=) <a e i o u>' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.say if .comb ⊇ <a e i o u>' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.print if .chars >= 80' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.chars >= 80 && .print' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.print if ++$ == 2' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'next if ++$ == 2' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.print if (1..3).any == ++$' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.print if /^Lorem/../laborum\.$/' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say lines.max.chars' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'state $l=0; $l = .chars if .chars > $l;END { $l.say }' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'say lines.max' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'my $l=""; for (lines) {$l = $_ if .chars > $l.chars};END { $l.say }' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.say if /\d/' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.say for lines.grep(/\d/)' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '/\d/ && .say' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'next if ! $_.match(/\d/)' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.say if /^\d+$/' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.say for lines.grep(/^\d+$/)' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '/^\d+$/ && .say' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce 'next if ! $_.match(/^\d+$/)' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.say if ++$ % 2' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.say if ! (++$ % 2)' example.txt}, "Syntax OK\n";
#is q:x{perl6 -ce 'state %l;.say if ++%l{$_}==2' example.txt}, "Syntax OK\n";
#is q:x{perl6 -ce 'state %l;.say if ++%l{$_}==1' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.words[0].say' example.txt}, "Syntax OK\n";
is q:x{perl6 -ce '.say if 1.rand <= 0.05' /usr/share/dict/words}, "Syntax OK\n";
is q:x{perl6 -M HTTP::UserAgent -ce 'say HTTP::UserAgent.new.get("google.com").content'}, "Syntax OK\n";
is q:x{perl6 -M HTTP::Server::Simple -ce 'HTTP::Server::Simple.new.run'}, "Syntax OK\n";
is q:x{perl6 -ce '.comb(/\w\w/).map({:16($_)}).say'}, "Syntax OK\n";
is q:x{perl6 -ce '.comb(/\w\w/).map({:16($_)}).say'}, "Syntax OK\n";
